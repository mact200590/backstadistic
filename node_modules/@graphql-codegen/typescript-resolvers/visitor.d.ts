import { TypeScriptResolversPluginConfig } from './config';
import { FieldDefinitionNode, ListTypeNode, NamedTypeNode, NonNullTypeNode, GraphQLSchema } from 'graphql';
import { ParsedResolversConfig, BaseResolversVisitor, DeclarationKind } from '@graphql-codegen/visitor-plugin-common';
export interface ParsedTypeScriptResolversConfig extends ParsedResolversConfig {
    avoidOptionals: boolean;
    useIndexSignature: boolean;
    wrapFieldDefinitions: boolean;
}
export declare class TypeScriptResolversVisitor extends BaseResolversVisitor<TypeScriptResolversPluginConfig, ParsedTypeScriptResolversConfig> {
    constructor(pluginConfig: TypeScriptResolversPluginConfig, schema: GraphQLSchema);
    protected formatRootResolver(schemaTypeName: string, resolverType: string): string;
    private clearOptional;
    ListType(node: ListTypeNode): string;
    protected wrapWithListType(str: string): string;
    protected getParentTypeForSignature(node: FieldDefinitionNode): "ParentType" | "UnwrappedObject<ParentType>";
    NamedType(node: NamedTypeNode): string;
    NonNullType(node: NonNullTypeNode): string;
    protected getPunctuation(declarationKind: DeclarationKind): string;
}
